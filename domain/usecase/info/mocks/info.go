// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/usecase/info/main.go

// Package info_usecasemocks is a generated GoMock package.
package info_usecasemocks

import (
	context "context"
	entity "go-rest-boilerplate/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInfoUsecase is a mock of InfoUsecase interface.
type MockInfoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockInfoUsecaseMockRecorder
}

// MockInfoUsecaseMockRecorder is the mock recorder for MockInfoUsecase.
type MockInfoUsecaseMockRecorder struct {
	mock *MockInfoUsecase
}

// NewMockInfoUsecase creates a new mock instance.
func NewMockInfoUsecase(ctrl *gomock.Controller) *MockInfoUsecase {
	mock := &MockInfoUsecase{ctrl: ctrl}
	mock.recorder = &MockInfoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoUsecase) EXPECT() *MockInfoUsecaseMockRecorder {
	return m.recorder
}

// FindAllInfo mocks base method.
func (m *MockInfoUsecase) FindAllInfo(ctx context.Context) (entity.Infos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllInfo", ctx)
	ret0, _ := ret[0].(entity.Infos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllInfo indicates an expected call of FindAllInfo.
func (mr *MockInfoUsecaseMockRecorder) FindAllInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllInfo", reflect.TypeOf((*MockInfoUsecase)(nil).FindAllInfo), ctx)
}
