// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/info/main.go

// Package info_repomocks is a generated GoMock package.
package info_repomocks

import (
	context "context"
	data "go-rest-boilerplate/data"
	entity "go-rest-boilerplate/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInfoRepository is a mock of InfoRepository interface.
type MockInfoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInfoRepositoryMockRecorder
}

// MockInfoRepositoryMockRecorder is the mock recorder for MockInfoRepository.
type MockInfoRepositoryMockRecorder struct {
	mock *MockInfoRepository
}

// NewMockInfoRepository creates a new mock instance.
func NewMockInfoRepository(ctrl *gomock.Controller) *MockInfoRepository {
	mock := &MockInfoRepository{ctrl: ctrl}
	mock.recorder = &MockInfoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoRepository) EXPECT() *MockInfoRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockInfoRepository) FindAll(ctx context.Context, scope data.Scope) (*entity.Infos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, scope)
	ret0, _ := ret[0].(*entity.Infos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockInfoRepositoryMockRecorder) FindAll(ctx, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockInfoRepository)(nil).FindAll), ctx, scope)
}

// FindByKey mocks base method.
func (m *MockInfoRepository) FindByKey(ctx context.Context, scope data.Scope, key string) (*entity.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", ctx, scope, key)
	ret0, _ := ret[0].(*entity.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockInfoRepositoryMockRecorder) FindByKey(ctx, scope, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockInfoRepository)(nil).FindByKey), ctx, scope, key)
}
